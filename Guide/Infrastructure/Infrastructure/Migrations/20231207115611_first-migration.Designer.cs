// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(GuideContext))]
    [Migration("20231207115611_first-migration")]
    partial class firstmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Domain.CloseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Quote.Close", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.CurrentTradingPeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gmtoffset")
                        .HasColumnType("int");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("MetaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Timezone")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.ToTable("CurrentTradingPeriod", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.HighEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeStamp")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Quote.High", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.LowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeStamp")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Quote.Low", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.MetaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("ChartPreviousClose")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Currency")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("DataGranularity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("ExchangeName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExchangeTimezoneName")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("FirstTradeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gmtoffset")
                        .HasColumnType("int");

                    b.Property<string>("InstrumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<decimal?>("PreviousClose")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int?>("PriceHint")
                        .HasColumnType("int");

                    b.Property<string>("Range")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("RegularMarketPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("RegularMarketTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("Scale")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Timezone")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Meta", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.OpenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeStamp")
                        .HasColumnType("int");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Quote.Open", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.QuoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("MetaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MetaId")
                        .IsUnique();

                    b.ToTable("Quote", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.TradingPeriodEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime");

                    b.Property<int?>("Gmtoffset")
                        .HasColumnType("int");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("MetaId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime");

                    b.Property<string>("Timezone")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.ToTable("TradingPeriod", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.ValidRangesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("MetaId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MetaId");

                    b.ToTable("ValidRanges", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.VolumeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NewId()");

                    b.Property<int>("QuoteId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeStamp")
                        .HasColumnType("int");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuoteId");

                    b.ToTable("Quote.Volume", (string)null);
                });

            modelBuilder.Entity("Domain.Domain.CloseEntity", b =>
                {
                    b.HasOne("Domain.Domain.QuoteEntity", "Quote")
                        .WithMany("Close")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Domain.CurrentTradingPeriodEntity", b =>
                {
                    b.HasOne("Domain.Domain.MetaEntity", "Meta")
                        .WithMany("CurrentTradingPeriod")
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Domain.Domain.HighEntity", b =>
                {
                    b.HasOne("Domain.Domain.QuoteEntity", "Quote")
                        .WithMany("High")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Domain.LowEntity", b =>
                {
                    b.HasOne("Domain.Domain.QuoteEntity", "Quote")
                        .WithMany("Low")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Domain.OpenEntity", b =>
                {
                    b.HasOne("Domain.Domain.QuoteEntity", "Quote")
                        .WithMany("Open")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Domain.QuoteEntity", b =>
                {
                    b.HasOne("Domain.Domain.MetaEntity", "Meta")
                        .WithOne("Quote")
                        .HasForeignKey("Domain.Domain.QuoteEntity", "MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Domain.Domain.TradingPeriodEntity", b =>
                {
                    b.HasOne("Domain.Domain.MetaEntity", "MetaEntity")
                        .WithMany("TradingPeriods")
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MetaEntity");
                });

            modelBuilder.Entity("Domain.Domain.ValidRangesEntity", b =>
                {
                    b.HasOne("Domain.Domain.MetaEntity", "Meta")
                        .WithMany("ValidRanges")
                        .HasForeignKey("MetaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meta");
                });

            modelBuilder.Entity("Domain.Domain.VolumeEntity", b =>
                {
                    b.HasOne("Domain.Domain.QuoteEntity", "Quote")
                        .WithMany("Volume")
                        .HasForeignKey("QuoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");
                });

            modelBuilder.Entity("Domain.Domain.MetaEntity", b =>
                {
                    b.Navigation("CurrentTradingPeriod");

                    b.Navigation("Quote")
                        .IsRequired();

                    b.Navigation("TradingPeriods");

                    b.Navigation("ValidRanges");
                });

            modelBuilder.Entity("Domain.Domain.QuoteEntity", b =>
                {
                    b.Navigation("Close");

                    b.Navigation("High");

                    b.Navigation("Low");

                    b.Navigation("Open");

                    b.Navigation("Volume");
                });
#pragma warning restore 612, 618
        }
    }
}
